{"name":"Vitess","tagline":"vitess provides servers and tools which facilitate scaling of MySQL databases for large scale web services.","body":"# Vitess <p align=\"right\">[![Build Status](https://travis-ci.org/youtube/vitess.svg?branch=master)](https://travis-ci.org/youtube/vitess/builds) [![Coverage Status](https://coveralls.io/repos/youtube/vitess/badge.png)](https://coveralls.io/r/youtube/vitess)</p>\r\n\r\nVitess is a set of servers and tools meant to facilitate scaling of MySQL\r\ndatabases for the web. It's been developed since 2011, and is currently used as\r\na fundamental component of YouTube's MySQL infrastructure, serving thousands of\r\nQPS (per server). If you want to find out whether Vitess is a good fit for your\r\nproject, please read our [helicopter\r\noverview](https://github.com/youtube/vitess/blob/master/doc/HelicopterOverview.md).\r\n\r\nThere are a couple of videos from [sougou](https://github.com/sougou) that you can watch:\r\na [short intro](http://youtu.be/midJ6b1LkA0) prepared for Google I/O 2014\r\nand a more [detailed presentation from @Scale '14](http://youtu.be/5yDO-tmIoXY).\r\n\r\n## Overview\r\n\r\n![Overview](https://raw.githubusercontent.com/youtube/vitess/master/doc/VitessOverview.png)\r\n\r\nVitess consists of a number servers, command line utilities, and a consistent\r\nmetadata store. Taken together, they allow you to serve more database traffic,\r\nand add features like sharding, which normally you would have to implement in your\r\napplication.\r\n\r\n**vttablet** is a server that sits in front of a MySQL database, making it more\r\nrobust and available in the face of high traffic. Among other things, it adds a\r\nconnection pool, has a row based cache, and it rewrites SQL queries to be safer\r\nand nicer to the underlying database.\r\n\r\n**vtgate** is a very light proxy that routes database traffic from your app to the\r\nright vttablet, basing on the sharding scheme, latency required, and health of\r\nthe vttablets. This allows the client to be very simple, as all it needs to be\r\nconcerned about is finding the closest vtgate.\r\n\r\nThe **topology** is a metadata store that contains information about running\r\nservers, the sharding scheme, and replication graph. It is backed by a\r\nconsistent data store, like [Apache ZooKeeper](http://zookeeper.apache.org/).\r\nThe topology backends are plugin based, allowing you to write your own if\r\nZooKeeper doesn't fit your needs. You can explore the topology through\r\n**vtctld**, a webserver (not shown in the diagram).\r\n\r\n**vtctl** is a command line utility that allows a human or a script to easily\r\ninteract with the system.\r\n\r\nAll components communicate using a lightweight RPC system based on\r\n[BSON](http://bsonspec.org/). The RPC system is plugin based, so you can easily\r\nwrite your own backend (at Google we use a Protocol Buffers based protocol). We\r\nprovide a client implementation for three languages: Python, Go, and Java.\r\nWriting a client for your language should not be difficult, as it's a matter of\r\nimplementing only a few API calls (please send us a pull request if you do!).\r\n\r\n## Trying it out\r\n\r\nVitess is not entirely ready for unsupervised use yet. Some functionality is\r\nstill under development, APIs may change, and parts of the code are\r\nundocumented. However, if you feel adventurous, you're more than welcome to try\r\nit. We know that there are some rough edges, so please don't hesitate to reach out\r\nto us through [our mailing list](https://groups.google.com/forum/#!forum/vitess)\r\nif you run into any issues. Warnings aside, please take a look at our [Getting\r\nStarted](https://github.com/youtube/vitess/blob/master/doc/GettingStarted.md)\r\nguide.\r\n\r\n## Documentation\r\n\r\n### Intro\r\n * [Helicopter overview](https://github.com/youtube/vitess/blob/master/doc/HelicopterOverview.md):\r\n     high level overview of Vitess that should tell you whether Vitess is for you.\r\n * [Frequently Asked Questions](https://github.com/youtube/vitess/blob/master/doc/FAQ.md).\r\n * [Vision](https://github.com/youtube/vitess/blob/master/doc/Vision.md):\r\n     principles guiding the design of Vitess.\r\n\r\n### Using Vitess\r\n\r\n * [Getting Started](https://github.com/youtube/vitess/blob/master/doc/GettingStarted.md):\r\n     how to set your environment to work with Vitess.\r\n * [Tools](https://github.com/youtube/vitess/blob/master/doc/Tools.md):\r\n     all Vitess tools and servers.\r\n * [vttablet/vtocc](https://github.com/youtube/vitess/blob/master/doc/vtocc.md):\r\n     information about the most important Vitess server.\r\n * [Reparenting](https://github.com/youtube/vitess/blob/master/doc/Reparenting.md):\r\n     performing master failover.\r\n * [Resharding](https://github.com/youtube/vitess/blob/master/doc/Resharding.md):\r\n     adding more shards to your cluster.\r\n * [Preparing for production](https://github.com/youtube/vitess/blob/master/doc/Production.md) (wip).\r\n * [Schema management](https://github.com/youtube/vitess/blob/master/doc/SchemaManagement.md):\r\n     managing your database schema using Vitess.\r\n\r\n### Reference\r\n\r\n * [General Concepts](https://github.com/youtube/vitess/blob/master/doc/Concepts.md)\r\n * [Zookeeper data](https://github.com/youtube/vitess/blob/master/doc/ZookeeperData.md)\r\n * [Serving graph](https://github.com/youtube/vitess/blob/master/doc/ServingGraph.md)\r\n * [Replication Graph](https://github.com/youtube/vitess/blob/master/doc/ReplicationGraph.md)\r\n\r\n## License\r\n\r\nUnless otherwise noted, the vitess source files are distributed\r\nunder the BSD-style license found in the LICENSE file.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}